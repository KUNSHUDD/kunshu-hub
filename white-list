<#
.SYNOPSIS
PowerShell 增强浏览器 - 支持搜索、专属网站和服务器位置检测

.DESCRIPTION
功能列表:
1. 网络搜索并选择结果
2. 专属网站收藏区管理
3. 关键词优先匹配网站
4. 境外服务器访问警告
5. GitHub账号集成
6. 纯控制台操作界面

.NOTES
作者: 您的名字
版本: 2.0
GitHub: 在此输入您的GitHub账号
#>

# 配置文件路径
$configPath = "$env:APPDATA\PSBrowserConfig.xml"

# 初始化配置
if (-not (Test-Path $configPath)) {
    $defaultConfig = @{
        GitHubAccount  = "在此输入您的GitHub账号"  # 修改为您的GitHub账号
        SearchEngine   = "https://www.bing.com/search?q={0}"
        CustomSites    = [ordered]@{
            "GitHub"    = "https://github.com"
            "微软文档"  = "https://learn.microsoft.com"
        }
        KeywordMatches = @{
            "公司产品"  = "https://www.yourproduct.com"
            "内部系统"  = "https://intranet.example.com"
        }
    }
    $defaultConfig | Export-Clixml -Path $configPath
    Write-Host "配置文件已创建: $configPath" -ForegroundColor Green
}

# 加载配置
$config = Import-Clixml -Path $configPath

function Show-MainMenu {
    Clear-Host
    Write-Host "`n=== PowerShell 增强浏览器 ===" -ForegroundColor Cyan
    Write-Host "GitHub账号: $($config.GitHubAccount)"
    Write-Host "1. 网络搜索"
    Write-Host "2. 访问专属网站"
    Write-Host "3. 管理专属网站"
    Write-Host "4. 管理关键词匹配"
    Write-Host "5. 设置GitHub账号"
    Write-Host "6. 退出"
    Write-Host "`n当前设置:"
    Write-Host "  - 搜索引擎: $($config.SearchEngine.Split('?')[0])"
    Write-Host "  - 专属网站: $($config.CustomSites.Count) 个"
    Write-Host "  - 快捷关键词: $($config.KeywordMatches.Count) 个"
    Write-Host "`n================================="
}

function Update-GitHubAccount {
    param([string]$newAccount)
    $config.GitHubAccount = $newAccount
    $config | Export-Clixml -Path $configPath
    Write-Host "GitHub账号已更新为: $newAccount" -ForegroundColor Green
}

function Invoke-WebSearch {
    param([string]$query)
    
    # 检查关键词匹配
    foreach ($keyword in $config.KeywordMatches.Keys) {
        if ($query -match "\b$([regex]::Escape($keyword))\b") {
            $matchUrl = $config.KeywordMatches[$keyword]
            Write-Host "`n[关键词匹配] 检测到 '$keyword' 将跳转到专属网站" -ForegroundColor Green
            return $matchUrl
        }
    }
    
    # 构建搜索URL
    $searchUrl = $config.SearchEngine -f [Uri]::EscapeDataString($query)
    
    # 获取搜索结果
    try {
        $response = Invoke-WebRequest -Uri $searchUrl -UserAgent "Mozilla/5.0" -UseBasicParsing -ErrorAction Stop
        
        # 提取搜索结果链接
        $links = $response.Links | 
            Where-Object { $_.href -and $_.href -match '^https?://' -and $_.href -notmatch '(bing\.com|google\.com)' } |
            ForEach-Object {
                $url = if ($_.href -match '^/') {
                    $uri = [Uri]$searchUrl
                    "$($uri.Scheme)://$($uri.Host)$($_.href)"
                } else {
                    $_.href
                }
                $url
            } |
            Select-Object -Unique |
            Select-Object -First 10
        
        if (-not $links) {
            Write-Host "`n未找到搜索结果，请尝试其他关键词" -ForegroundColor Red
            return $null
        }
        
        Write-Host "`n=== 搜索结果 ===" -ForegroundColor Yellow
        for ($i = 0; $i -lt $links.Count; $i++) {
            Write-Host "$($i+1). $($links[$i])"
        }
        Write-Host "`n0. 返回主菜单"
        
        # 用户选择
        $choice = Read-Host "`n请选择要访问的链接 (1-$($links.Count))"
        if ($choice -eq 0) { return $null }
        if ($choice -ge 1 -and $choice -le $links.Count) {
            return $links[$choice-1]
        }
        
        Write-Host "无效选择" -ForegroundColor Red
        return $null
    }
    catch {
        Write-Host "`n搜索失败: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

function Show-WebsiteContent {
    param([string]$url)
    
    # 检测服务器位置
    try {
        $domain = ([Uri]$url).Host
        $ip = [System.Net.Dns]::GetHostAddresses($domain)[0].IPAddressToString
        
        # 使用IPAPI检测国家
        $geoResponse = Invoke-RestMethod -Uri "http://ip-api.com/json/$ip" -ErrorAction SilentlyContinue
        if ($geoResponse.status -eq "success") {
            Write-Host "`n服务器位置: $($geoResponse.country) ($($geoResponse.countryCode))" -ForegroundColor Cyan
            if ($geoResponse.countryCode -ne "CN") {
                Write-Host "警告: 此服务器位于境外!" -ForegroundColor Red -BackgroundColor Black
                Write-Host "按任意键继续访问，或按ESC取消"
                $key = $host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
                if ($key.VirtualKeyCode -eq 27) { return }
            }
        }
    }
    catch {
        Write-Host "`n地理位置检测失败: $($_.Exception.Message)" -ForegroundColor Yellow
    }
    
    # 获取网站内容
    try {
        $response = Invoke-WebRequest -Uri $url -UseBasicParsing -ErrorAction Stop
        
        # 显示纯文本内容
        Clear-Host
        Write-Host "`n=== 网站内容 ($url) ===" -ForegroundColor Green
        Write-Host $response.Content.Substring(0, [Math]::Min(2000, $response.Content.Length))
        Write-Host "`n(内容已截断，仅显示部分文本)"
        
        # 返回HTML源码路径
        $htmlPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), "webcontent_$(Get-Date -Format 'yyyyMMddHHmmss').html")
        $response.Content | Out-File -FilePath $htmlPath
        Write-Host "`n完整HTML源码已保存到: $htmlPath" -ForegroundColor Cyan
    }
    catch {
        Write-Host "`n访问失败: $($_.Exception.Message)" -ForegroundColor Red
    }
}

function Manage-CustomSites {
    Clear-Host
    Write-Host "`n=== 专属网站管理 ===" -ForegroundColor Cyan
    Write-Host "当前专属网站:"
    $index = 1
    foreach ($site in $config.CustomSites.GetEnumerator()) {
        Write-Host "$index. $($site.Key) - $($site.Value)"
        $index++
    }
    
    Write-Host "`n操作选项:"
    Write-Host "A. 添加网站"
    Write-Host "D. 删除网站"
    Write-Host "B. 返回主菜单"
    
    $choice = Read-Host "`n请选择操作"
    switch -Regex ($choice.ToUpper()) {
        'A' {
            $name = Read-Host "`n输入网站名称"
            $url = Read-Host "输入网站URL"
            if ($url -notmatch '^https?://') {
                $url = "http://" + $url
            }
            $config.CustomSites[$name] = $url
            $config | Export-Clixml -Path $configPath
            Write-Host "网站已添加!" -ForegroundColor Green
        }
        'D' {
            $num = Read-Host "输入要删除的网站编号"
            if ($num -match '^\d+$' -and [int]$num -ge 1 -and [int]$num -le $config.CustomSites.Count) {
                $key = $config.CustomSites.Keys[[int]$num - 1]
                $config.CustomSites.Remove($key)
                $config | Export-Clixml -Path $configPath
                Write-Host "网站已删除!" -ForegroundColor Green
            }
            else {
                Write-Host "无效编号" -ForegroundColor Red
            }
        }
    }
}

function Manage-KeywordMatches {
    Clear-Host
    Write-Host "`n=== 关键词管理 ===" -ForegroundColor Cyan
    Write-Host "当前关键词匹配:"
    $index = 1
    foreach ($kw in $config.KeywordMatches.GetEnumerator()) {
        Write-Host "$index. $($kw.Key) -> $($kw.Value)"
        $index++
    }
    
    Write-Host "`n操作选项:"
    Write-Host "A. 添加关键词"
    Write-Host "D. 删除关键词"
    Write-Host "B. 返回主菜单"
    
    $choice = Read-Host "`n请选择操作"
    switch -Regex ($choice.ToUpper()) {
        'A' {
            $keyword = Read-Host "`n输入关键词"
            $url = Read-Host "输入匹配的URL"
            if ($url -notmatch '^https?://') {
                $url = "http://" + $url
            }
            $config.KeywordMatches[$keyword] = $url
            $config | Export-Clixml -Path $configPath
            Write-Host "关键词已添加!" -ForegroundColor Green
        }
        'D' {
            $num = Read-Host "输入要删除的关键词编号"
            if ($num -match '^\d+$' -and [int]$num -ge 1 -and [int]$num -le $config.KeywordMatches.Count) {
                $key = $config.KeywordMatches.Keys[[int]$num - 1]
                $config.KeywordMatches.Remove($key)
                $config | Export-Clixml -Path $configPath
                Write-Host "关键词已删除!" -ForegroundColor Green
            }
            else {
                Write-Host "无效编号" -ForegroundColor Red
            }
        }
    }
}

# 主程序循环
while ($true) {
    Show-MainMenu
    $choice = Read-Host "`n请选择操作"
    
    switch ($choice) {
        '1' {
            $query = Read-Host "`n输入搜索内容"
            if (-not [string]::IsNullOrWhiteSpace($query)) {
                $url = Invoke-WebSearch -query $query
                if ($url) {
                    Show-WebsiteContent -url $url
                }
            }
            pause
        }
        '2' {
            Clear-Host
            Write-Host "`n=== 专属网站列表 ===" -ForegroundColor Cyan
            $index = 1
            $urls = @()
            foreach ($site in $config.CustomSites.Values) {
                Write-Host "$index. $site"
                $urls += $site
                $index++
            }
            Write-Host "`n0. 返回主菜单"
            
            $choice = Read-Host "`n请选择要访问的网站"
            if ($choice -ne '0') {
                if ($choice -match '^\d+$' -and [int]$choice -ge 1 -and [int]$choice -le $urls.Count) {
                    Show-WebsiteContent -url $urls[[int]$choice - 1]
                }
                else {
                    Write-Host "无效选择" -ForegroundColor Red
                }
            }
            pause
        }
        '3' { 
            Manage-CustomSites
            pause 
        }
        '4' { 
            Manage-KeywordMatches
            pause 
        }
        '5' {
            $newAccount = Read-Host "`n输入您的GitHub账号"
            if (-not [string]::IsNullOrWhiteSpace($newAccount)) {
                Update-GitHubAccount -newAccount $newAccount
            }
            pause
        }
        '6' { exit }
        default { Write-Host "无效选择" -ForegroundColor Red; pause }
    }
}
